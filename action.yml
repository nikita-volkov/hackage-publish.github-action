name: Publish to Hackage
description: Publish Haskell packages to Hackage

branding:
  icon: 'upload'
  color: 'green'

inputs:
  hackageServer:
    description: 'URL to the Hackage server'
    required: false
    default: 'http://hackage.haskell.org'

  hackageToken:
    description: 'Authentication token for Hackage'
    required: true

  publish:
    description: 'A flag indicating whether to publish the release on Hackage. Uploads a release candidate if set to false'
    required: false
    default: 'false'

  packagesPath:
    description: 'Path that contains packages tarbals'
    required: false
    default: dist-newstyle/sdist

  docsPath:
    description: 'Path that contains packages documentation tarbals'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:

    - name: Publish packages
      shell: bash
      run: |
          HACKAGE_AUTH_HEADER="Authorization: X-ApiKey ${{ inputs.hackageToken }}"

          for PACKAGE_TARBALL in $(find "${{ inputs.packagesPath }}" -maxdepth 1 -name "*.tar.gz"); do
              PACKAGE_NAME=$(basename ${PACKAGE_TARBALL%.*.*})
              
              if [ "${{ inputs.publish }}" == "true" ];
                then
                  TARGET_URL="${{ inputs.hackageServer }}/packages/upload";
                  PACKAGE_URL="${{ inputs.hackageServer }}/package/$PACKAGE_NAME"
                  HACKAGE_STATUS=$(curl --header "${HACKAGE_AUTH_HEADER}" --silent --head -w %{http_code} -XGET --anyauth ${{ inputs.hackageServer }}/package/${PACKAGE_NAME} -o /dev/null)
                else
                  TARGET_URL="${{ inputs.hackageServer }}/packages/candidates";
                  PACKAGE_URL="${{ inputs.hackageServer }}/package/$PACKAGE_NAME/candidate"
                  HACKAGE_STATUS=404
              fi

              DOCS_URL="$PACKAGE_URL/docs"

              if [ "$HACKAGE_STATUS" = "404" ]; then
                echo "Uploading ${PACKAGE_NAME} to ${TARGET_URL}"
                curl -X POST -f --header "${HACKAGE_AUTH_HEADER}" ${TARGET_URL} -F "package=@$PACKAGE_TARBALL"
                echo "Uploaded ${PACKAGE_URL}"

                DOC_FILE_NAME="${{ inputs.docsPath }}/${PACKAGE_NAME}-docs.tar.gz"
                if [ -n "${{ inputs.docsPath }}" ] && [ -f "$DOC_FILE_NAME" ]; then
                  echo "Uploading documentation for ${PACKAGE_NAME} to ${DOCS_URL}"
                  curl -X PUT \
                    -H 'Content-Type: application/x-tar' \
                    -H 'Content-Encoding: gzip' \
                    -H "${HACKAGE_AUTH_HEADER}" \
                    --data-binary "@$DOC_FILE_NAME" \
                    "$DOCS_URL"
                fi

              else
                echo "Package ${PACKAGE_NAME}" already exists on Hackage.
              fi
          done
